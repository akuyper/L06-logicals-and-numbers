---
title: "L06 Logicals and Numbers"
subtitle: "Data Science 1 with R (STAT 301-1)"
aauthor: "YOUR NAME"

format:
  html:
    toc: true
    embed-resources: true
    code-fold: show
    link-external-newwindow: true

execute:
  warning: false
  
from: markdown+emoji 
---

::: {.callout-tip icon=false}

## Github Repo Link

To link to your github **repo**sitory, appropriately edit the example link below. Meaning replace `https://your-github-repo-url` with your github repo url. Suggest verifying the link works before submitting.

[https://your-github-repo-url](https://your-github-repo-url)

:::

## Overview

The goal of this lab is to explore practice using two important variable types that you'll encounter inside data frames: logicals and numerics vectors. Logicals are the simplest types of vectors, but are extremely powerful. It's relatively rare to find logical vectors in your raw data, but you’ll create and manipulate them in the course of almost every analysis. Numerics are the backbone of data science and is the type of data type that most think of when it comes to data science. 

## Load packages

You should always begin by loading all necessary packages towards the beginning of your document.

```{r}
#| label: load-pkgs
#| code-fold: false

# Loading package(s)

```

## Datasets 

This lab utilizes the `flights` datasets contained in the `nycflights13` package. Documentation/codebook can be accessed with `?flights`, provided you have installed and loaded `nycflights13` and `tidyverse` in your current R session. You'll also need the `college_rankings.csv`^[This dataset was sourced from [College Scorecard](https://collegescorecard.ed.gov/data) and [Times Higher Education](https://www.timeshighereducation.com/rankings/united-states/2022#!/length/-1/sort_by/rank/sort_order/asc/cols/scores)] data file for the case study. The data and codebook is contained in the `data/` subdirectory.    

## Exercises

### Exercise 1 

Use `mutate()`, `is.na()`, and `count()` together to describe how the missing values in `dep_time`, `scheduled_dep_time`, and `dep_delay` are connected.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 2

Find all flights where `arr_delay` is missing but `dep_delay` is not. Find all flights where neither `arr_time` nor `sched_arr_time` is missing, but `arr_delay` is.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 3

How many flights have a missing `dep_time`? What other variables are missing in these rows? What might these rows represent?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 4

What will `sum(is.na(x))` tell you? How about `mean(is.na(x))`?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 5

A number is even if it’s divisible by two, which in R you can find out with `x %% 2 == 0`. Use this fact and `if_else()` to determine whether each number between 0 and 20 is even or odd.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 6

Replace the following calls to `count()` to instead use `group_by()`, `summarize()`, and `arrange()`:

`flights |> count(dest, sort = TRUE)`

`flights |> count(tailnum, wt = distance)`

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 7

a. For each destination, compute the total minutes of delay. 
b. For each flight, compute the proportion of the total delay for its destination.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


## Case Study

Use the `college_rankings` file in the `data/` subdirectory to complete the tasks below. Code should be visible and output should be displayed in a way to clearly demonstrate the task's objective.

- Use `case_when()` to define each observation as either "Midwest", "Northeast", "South", or "West" as defined by the US Census Bureau. Call this new variable `region`.
- Use an `ifelse` statement to change the `public` variable to be `TRUE` if it is public and `FALSE` if it is not.
- Use the `cut` function to categorize the `overall_score` into bins spanning increments of 10.
- Round `tuition_fees` to the nearest $1,000.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


## Graduate Challenge

::: callout-important

Graduate students are required to complete this challenge. **It is optional for undergraduate students.**

:::

Provide appropriate support visualizations or tables to help support the answer to each of the questions below. Code can be hidden, but visualizations and tables are expected to be nicely formatted.

- Which region has the highest average `tuition_fees`?
- Which region has the highest variation in `tuition_fees`?
- Are there an equal proportion of public and private schools in the `overall_score` bins?

